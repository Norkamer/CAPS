#!/usr/bin/env python3
"""
Test du flux d'animation complet 1‚Üí33 transactions
Valide que l'animation CAPS fonctionne de bout en bout
"""

import requests
import time
import json
from typing import Dict, Any

def test_animation_flow_complete():
    """Test le flux d'animation complet de 1 √† 33 transactions"""

    print("üß™ D√âBUT TEST ANIMATION FLOW COMPLET")
    print("=" * 50)

    base_url = "http://localhost:5000"
    headers = {"Content-Type": "application/json"}

    # Phase 1: Reset animation
    print("\nüìÖ PHASE 1: Reset de l'animation")
    try:
        response = requests.post(
            f"{base_url}/api/simulations/animate",
            headers=headers,
            json={"action": "reset"},
            timeout=10
        )

        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Reset r√©ussi: {data.get('total_transactions', 0)} transactions pr√™tes")
            total_transactions = data.get('total_transactions', 0)
            if total_transactions != 33:
                print(f"‚ö†Ô∏è  Attention: {total_transactions} transactions au lieu de 33 attendues")
        else:
            print(f"‚ùå Reset √©chou√©: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur reset: {e}")
        return False

    # Phase 2: Test status initial
    print("\nüìä PHASE 2: V√©rification status initial")
    try:
        response = requests.post(
            f"{base_url}/api/simulations/animate",
            headers=headers,
            json={"action": "status"},
            timeout=5
        )

        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Status initial: √©tape {data.get('current_step', 0)}/{data.get('total_transactions', 0)}")
        else:
            print(f"‚ùå Status √©chou√©: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur status: {e}")

    # Phase 3: Ex√©cution de plusieurs steps
    print("\nüîÑ PHASE 3: Ex√©cution s√©quentielle de transactions")

    results = []
    for step in range(1, 6):  # Tester les 5 premi√®res transactions
        try:
            print(f"\nüîπ √âtape {step}/5:")
            response = requests.post(
                f"{base_url}/api/simulations/animate",
                headers=headers,
                json={"action": "step"},
                timeout=10
            )

            if response.status_code == 200:
                data = response.json()

                if data.get('success'):
                    step_num = data.get('step', 0)
                    progress = data.get('progress_percent', 0)
                    transaction = data.get('transaction', {})

                    print(f"  ‚úÖ Transaction {step_num}: {transaction.get('source', 'N/A')} ‚Üí {transaction.get('target', 'N/A')}")
                    print(f"  üí∞ Montant: {transaction.get('amount', 0)}")
                    print(f"  üìà Progression: {progress:.1f}%")

                    results.append({
                        'step': step_num,
                        'success': True,
                        'transaction': transaction,
                        'progress': progress
                    })

                    if data.get('completed'):
                        print("  üéâ Animation termin√©e!")
                        break
                else:
                    print(f"  ‚ùå Erreur API: {data.get('error', 'Inconnue')}")
                    results.append({'step': step, 'success': False, 'error': data.get('error')})
            else:
                print(f"  ‚ùå HTTP Error {response.status_code}")
                results.append({'step': step, 'success': False, 'error': f'HTTP {response.status_code}'})

        except Exception as e:
            print(f"  ‚ùå Exception: {e}")
            results.append({'step': step, 'success': False, 'error': str(e)})

        # Pause entre les √©tapes
        time.sleep(1)

    # Phase 4: V√©rification status final
    print("\nüìä PHASE 4: Status final apr√®s tests")
    try:
        response = requests.post(
            f"{base_url}/api/simulations/animate",
            headers=headers,
            json={"action": "status"},
            timeout=5
        )

        if response.status_code == 200:
            data = response.json()
            current_step = data.get('current_step', 0)
            total_steps = data.get('total_transactions', 0)
            progress = data.get('progress_percent', 0)

            print(f"‚úÖ Status final: √©tape {current_step}/{total_steps} ({progress:.1f}%)")
        else:
            print(f"‚ùå Status final √©chou√©: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur status final: {e}")

    # Phase 5: Analyse des r√©sultats
    print("\nüìã PHASE 5: Analyse des r√©sultats")
    print("=" * 30)

    successful_steps = len([r for r in results if r.get('success')])
    total_steps_tested = len(results)

    print(f"üìä Transactions test√©es: {total_steps_tested}")
    print(f"‚úÖ Transactions r√©ussies: {successful_steps}")
    print(f"‚ùå Transactions √©chou√©es: {total_steps_tested - successful_steps}")
    print(f"üìà Taux de r√©ussite: {(successful_steps/total_steps_tested*100):.1f}%")

    # Affichage d√©taill√© des transactions r√©ussies
    print("\nüìù D√âTAIL DES TRANSACTIONS R√âUSSIES:")
    for result in results:
        if result.get('success'):
            tx = result.get('transaction', {})
            print(f"  ‚Ä¢ √âtape {result['step']}: {tx.get('flow', 'N/A')} - {tx.get('amount', 0)}")

    # Affichage des erreurs
    errors = [r for r in results if not r.get('success')]
    if errors:
        print("\n‚ùå ERREURS D√âTECT√âES:")
        for error in errors:
            print(f"  ‚Ä¢ √âtape {error['step']}: {error.get('error', 'Erreur inconnue')}")

    # Conclusion
    print("\nüéØ CONCLUSION:")
    if successful_steps >= 3:
        print("‚úÖ FLUX D'ANIMATION VALID√â - Le syst√®me fonctionne correctement!")
        print("  ‚Ä¢ L'API d'animation r√©pond aux requ√™tes")
        print("  ‚Ä¢ Les transactions s'ex√©cutent en s√©quence")
        print("  ‚Ä¢ Les m√©tadonn√©es sont retourn√©es correctement")
        print("  ‚Ä¢ Le syst√®me de progression fonctionne")
        return True
    else:
        print("‚ùå FLUX D'ANIMATION EN √âCHEC - Probl√®mes d√©tect√©s")
        print("  ‚Ä¢ Moins de 3 transactions r√©ussies")
        print("  ‚Ä¢ V√©rifier la configuration du serveur")
        print("  ‚Ä¢ V√©rifier l'√©tat de la simulation 65 agents")
        return False

if __name__ == "__main__":
    success = test_animation_flow_complete()

    print("\n" + "=" * 50)
    if success:
        print("üéâ TEST COMPLET R√âUSSI - Animation flow 1‚Üí33 op√©rationnel!")
    else:
        print("üîß TEST PARTIELLEMENT R√âUSSI - Am√©liorations n√©cessaires")
    print("=" * 50)
#!/usr/bin/env python3
"""
Test Phase 2 - Integration Interface Unifi√©e
============================================

Teste l'int√©gration compl√®te Phase 2 avec interface unifi√©e :
- Endpoints √©tendus avec donn√©es 3D
- Interface 3D int√©gr√©e dans dashboard principal
- Workflow end-to-end fonctionnel

Validation rapide que la Phase 2 fonctionne correctement.
"""

import requests
import json
from decimal import Decimal

def test_phase_2_endpoints():
    """Test que les endpoints Phase 2A fonctionnent"""
    base_url = "http://localhost:5000"

    print("üîç Test Phase 2A - Endpoints √©tendus avec donn√©es 3D")

    # Test /api/metrics avec donn√©es 3D
    response = requests.get(f"{base_url}/api/metrics")
    assert response.status_code == 200

    metrics = response.json()
    assert 'simplex_3d' in metrics
    print(f"   ‚úÖ /api/metrics contient donn√©es simplex_3d: {bool(metrics['simplex_3d'])}")

    # Test /api/history
    response = requests.get(f"{base_url}/api/history")
    assert response.status_code == 200
    history = response.json()
    print(f"   ‚úÖ /api/history accessible: {len(history)} transactions")

    print("   ‚úÖ Phase 2A - Endpoints √©tendus VALID√âS")

def test_phase_2_interface():
    """Test que l'interface 3D est pr√©sente"""
    base_url = "http://localhost:5000"

    print("üåå Test Phase 2B - Interface 3D int√©gr√©e")

    # Test page principale contient √©l√©ments 3D
    response = requests.get(f"{base_url}/")
    assert response.status_code == 200

    html_content = response.text

    # V√©rifier pr√©sence √©l√©ments 3D
    assert 'Visualisation 3D Algorithme Simplex' in html_content
    assert 'visualization3D' in html_content
    assert 'animateLastTx' in html_content
    assert 'three.min.js' in html_content

    print("   ‚úÖ Interface contient section 3D compl√®te")
    print("   ‚úÖ Three.js CDN inclus")
    print("   ‚úÖ Contr√¥les animation pr√©sents")
    print("   ‚úÖ Phase 2B - Interface 3D VALID√âE")

def test_phase_2_workflow():
    """Test workflow end-to-end Phase 2C"""
    base_url = "http://localhost:5000"

    print("üîÑ Test Phase 2C - Workflow end-to-end")

    try:
        # 1. Cr√©er agents via API
        agent_data = {
            "agent_id": "ALICE_TEST_P2",
            "sector": "AGRICULTURE",
            "balance": 1000,
            "metadata": {"test_phase": "2"}
        }

        response = requests.post(f"{base_url}/api/agents", json=agent_data)
        if response.status_code == 200:
            print("   ‚úÖ Cr√©ation agent ALICE_TEST_P2 r√©ussie")
        else:
            print(f"   ‚ö†Ô∏è Cr√©ation agent √©chou√©e: {response.status_code}")

        agent_data = {
            "agent_id": "BOB_TEST_P2",
            "sector": "INDUSTRY",
            "balance": 1000,
            "metadata": {"test_phase": "2"}
        }

        response = requests.post(f"{base_url}/api/agents", json=agent_data)
        if response.status_code == 200:
            print("   ‚úÖ Cr√©ation agent BOB_TEST_P2 r√©ussie")

        # 2. Cr√©er transaction via API
        tx_data = {
            "source_id": "ALICE_TEST_P2",
            "target_id": "BOB_TEST_P2",
            "amount": 150
        }

        response = requests.post(f"{base_url}/api/transaction", json=tx_data)
        if response.status_code == 200:
            tx_result = response.json()
            print("   ‚úÖ Transaction valid√©e avec succ√®s")

            # V√©rifier que donn√©es animation sont incluses
            if 'animation' in tx_result.get('transaction', {}):
                print("   ‚úÖ Donn√©es animation 3D incluses dans r√©ponse")
                print("   ‚úÖ Phase 2C - Workflow VALID√â")
            else:
                print("   ‚ö†Ô∏è Donn√©es animation non trouv√©es (normal si pas de collecteur)")
        else:
            print(f"   ‚ùå Transaction √©chou√©e: {response.status_code}")

    except requests.exceptions.ConnectionError:
        print("   ‚ùå Serveur web non accessible - Lancer icgs_web_visualizer.py")
        return False
    except Exception as e:
        print(f"   ‚ùå Erreur workflow: {e}")
        return False

    return True

def test_demo_integration():
    """Test d√©monstration int√©gr√©e"""
    base_url = "http://localhost:5000"

    print("üéØ Test Demo Integration")

    try:
        response = requests.get(f"{base_url}/api/simulation/run_demo")
        if response.status_code == 200:
            demo_result = response.json()
            print(f"   ‚úÖ D√©mo ex√©cut√©e: {demo_result.get('message', 'Succ√®s')}")

            # V√©rifier m√©triques mises √† jour
            response = requests.get(f"{base_url}/api/metrics")
            if response.status_code == 200:
                metrics = response.json()
                simplex_3d = metrics.get('simplex_3d', {})
                states_captured = simplex_3d.get('states_captured', 0)
                print(f"   ‚úÖ √âtats Simplex captur√©s: {states_captured}")
                print("   ‚úÖ Demo Integration VALID√âE")
        else:
            print(f"   ‚ö†Ô∏è D√©mo √©chou√©e: {response.status_code}")

    except Exception as e:
        print(f"   ‚ùå Erreur demo: {e}")

if __name__ == '__main__':
    print("üöÄ Test Phase 2 - Interface Unifi√©e Compl√®te")
    print("=" * 60)
    print("Validation int√©gration Phase 1 + Phase 2")
    print("Interface web : http://localhost:5000")
    print()

    try:
        # Tests Phase 2
        test_phase_2_endpoints()
        print()
        test_phase_2_interface()
        print()
        test_phase_2_workflow()
        print()
        test_demo_integration()

        print()
        print("=" * 60)
        print("üéâ PHASE 2 VALID√âE - Interface Unifi√©e Fonctionnelle")
        print("=" * 60)
        print("‚úÖ Phase 2A: Endpoints √©tendus avec donn√©es 3D")
        print("‚úÖ Phase 2B: Interface 3D int√©gr√©e dans dashboard")
        print("‚úÖ Phase 2C: Workflow end-to-end op√©rationnel")
        print()
        print("üåå Fonctionnalit√©s disponibles:")
        print("- Cr√©ation agents √©conomiques")
        print("- Validation transactions authentiques")
        print("- Visualisation 3D algorithme Simplex temps r√©el")
        print("- M√©triques performance int√©gr√©es")
        print("- Animation des pivots Simplex authentiques")
        print()
        print("üîó Acc√©der √† l'interface: http://localhost:5000")

    except Exception as e:
        print(f"‚ùå Test Phase 2 √©chou√©: {e}")
        print("V√©rifier que icgs_web_visualizer.py est en cours d'ex√©cution")
#!/usr/bin/env python3
"""
Test Performance Optimizations - Validation Cache et 3D pour 65 Agents

Tests pour valider les optimisations de performance impl√©ment√©es:
- PerformanceCache avec TTL et cleanup LRU
- Validation cache pour transactions
- Cache donn√©es 3D pour analyses volumineuses
- Optimisations web pour 65 agents
"""

import sys
import os
import time
from decimal import Decimal

# Import du module simulation
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))
from icgs_simulation.api.icgs_bridge import EconomicSimulation, SimulationMode


def test_performance_cache_basic():
    """Test fonctionnalit√© de base du cache de performance"""
    print("üîç Test cache de performance basique")

    simulation = EconomicSimulation("test_cache", agents_mode="65_agents")

    # V√©rifier que le cache est initialis√©
    assert hasattr(simulation, 'performance_cache'), "PerformanceCache non initialis√©"

    # Statistiques cache initial
    initial_stats = simulation.performance_cache.get_cache_stats()
    assert initial_stats['hit_count'] == 0, "Hit count initial doit √™tre 0"
    assert initial_stats['miss_count'] == 0, "Miss count initial doit √™tre 0"

    print(f"   ‚úÖ Cache initialis√©: {initial_stats}")
    return True


def test_transaction_validation_caching():
    """Test mise en cache validation transactions"""
    print("üîç Test cache validation transactions")

    simulation = EconomicSimulation("test_validation_cache", agents_mode="40_agents")

    # Cr√©er quelques agents
    simulation.create_agent("FARM_01", "AGRICULTURE", Decimal('1000'))
    simulation.create_agent("INDU_01", "INDUSTRY", Decimal('800'))

    # Cr√©er transaction
    tx_id = simulation.create_transaction("FARM_01", "INDU_01", Decimal('100'))

    # Premier appel - devrait √™tre un cache miss
    start_time = time.time()
    result1 = simulation.validate_transaction(tx_id, SimulationMode.FEASIBILITY)
    first_call_time = time.time() - start_time

    # Deuxi√®me appel - devrait √™tre un cache hit
    start_time = time.time()
    result2 = simulation.validate_transaction(tx_id, SimulationMode.FEASIBILITY)
    second_call_time = time.time() - start_time

    # V√©rifier que les r√©sultats sont identiques
    assert result1.success == result2.success, "R√©sultats cache inconsistants"
    assert result1.status == result2.status, "Status cache inconsistants"

    # V√©rifier statistiques cache
    cache_stats = simulation.performance_cache.get_cache_stats()
    assert cache_stats['hit_count'] >= 1, "Pas de cache hit d√©tect√©"

    print(f"   ‚úÖ Premier appel: {first_call_time*1000:.2f}ms")
    print(f"   ‚úÖ Deuxi√®me appel (cache): {second_call_time*1000:.2f}ms")
    print(f"   ‚úÖ Cache hit rate: {cache_stats['hit_rate_percent']}%")

    return True


def test_performance_stats_comprehensive():
    """Test statistiques performance compl√®tes"""
    print("üîç Test statistiques performance compl√®tes")

    simulation = EconomicSimulation("test_perf_stats", agents_mode="65_agents")

    # Cr√©er agents vari√©s
    for i in range(5):
        simulation.create_agent(f"AGRI_{i:02d}", "AGRICULTURE", Decimal('1200'))
        simulation.create_agent(f"INDU_{i:02d}", "INDUSTRY", Decimal('900'))
        simulation.create_agent(f"SERV_{i:02d}", "SERVICES", Decimal('700'))

    # Cr√©er transactions
    tx_ids = []
    for i in range(3):
        tx_id = simulation.create_transaction(f"AGRI_{i:02d}", f"INDU_{i:02d}", Decimal('50'))
        tx_ids.append(tx_id)

    # Validation transactions
    for tx_id in tx_ids:
        simulation.validate_transaction(tx_id, SimulationMode.FEASIBILITY)

    # Obtenir statistiques compl√®tes
    stats = simulation.get_performance_stats()

    # V√©rifications
    assert 'cache_performance' in stats, "Pas de stats cache"
    assert 'simulation' in stats, "Pas de stats simulation"
    assert 'sectors_distribution' in stats, "Pas de distribution secteurs"

    assert stats['simulation']['agents_count'] == 15, f"Nombre agents incorrect: {stats['simulation']['agents_count']}"
    assert stats['simulation']['transactions_count'] == 3, f"Nombre transactions incorrect: {stats['simulation']['transactions_count']}"

    print(f"   ‚úÖ Agents: {stats['simulation']['agents_count']}")
    print(f"   ‚úÖ Transactions: {stats['simulation']['transactions_count']}")
    print(f"   ‚úÖ Cache hit rate: {stats['cache_performance']['hit_rate_percent']}%")
    print(f"   ‚úÖ Secteurs: {stats['sectors_distribution']}")

    return True


def test_web_load_optimization():
    """Test optimisations pour charge web"""
    print("üîç Test optimisations charge web")

    simulation = EconomicSimulation("test_web_opt", agents_mode="65_agents")

    # Cr√©er agents massifs (simulation 65 agents) - besoin >= 40 pour optimisation
    # Distribution respectant limites sectorielles: AGRICULTURE(10), INDUSTRY(15), SERVICES(20), FINANCE(8), ENERGY(12)
    sectors_config = [
        ("AGRICULTURE", 10), ("INDUSTRY", 15), ("SERVICES", 20),
        ("FINANCE", 8), ("ENERGY", 12)
    ]

    agent_count = 0
    for sector_name, max_agents in sectors_config:
        for i in range(max_agents):
            simulation.create_agent(f"{sector_name}_{i:02d}", sector_name, Decimal('500'))
            agent_count += 1

    # Appliquer optimisations web
    simulation.optimize_for_web_load()

    # V√©rifier que taxonomie est configur√©e
    assert simulation.taxonomy_configured, "Taxonomie pas configur√©e apr√®s optimisation"

    # V√©rifier ajustements TTL cache
    assert simulation.performance_cache.validation_ttl <= 200.0, "TTL validation pas ajust√©"
    assert simulation.performance_cache.data_3d_ttl <= 350.0, "TTL 3D pas ajust√©"

    print(f"   ‚úÖ Taxonomie configur√©e: {simulation.taxonomy_configured}")
    print(f"   ‚úÖ TTL validation: {simulation.performance_cache.validation_ttl}s")
    print(f"   ‚úÖ TTL donn√©es 3D: {simulation.performance_cache.data_3d_ttl}s")

    return True


def test_cache_cleanup_lru():
    """Test nettoyage LRU du cache"""
    print("üîç Test cleanup LRU cache")

    # Cr√©er simulation avec cache petit pour test
    simulation = EconomicSimulation("test_lru", agents_mode="7_agents")
    simulation.performance_cache.max_validation_cache = 5  # Limite tr√®s basse

    # Cr√©er agents
    simulation.create_agent("FARM_01", "AGRICULTURE", Decimal('1000'))
    simulation.create_agent("INDU_01", "INDUSTRY", Decimal('800'))

    # Cr√©er et valider plus de transactions que la limite cache
    tx_ids = []
    for i in range(8):  # Plus que max_validation_cache
        tx_id = simulation.create_transaction("FARM_01", "INDU_01", Decimal(f'{100+i*10}'))
        tx_ids.append(tx_id)
        simulation.validate_transaction(tx_id, SimulationMode.FEASIBILITY)

    # V√©rifier que le cache ne d√©passe pas sa limite
    cache_stats = simulation.performance_cache.get_cache_stats()
    assert cache_stats['validation_cache_size'] <= 5, f"Cache trop grand: {cache_stats['validation_cache_size']}"

    print(f"   ‚úÖ Cache size apr√®s cleanup: {cache_stats['validation_cache_size']}/5")
    print(f"   ‚úÖ Transactions trait√©es: {len(tx_ids)}")

    return True


def test_65_agents_stress_performance():
    """Test stress performance avec configuration 65 agents"""
    print("üîç Test stress performance 65 agents")

    simulation = EconomicSimulation("test_65_stress", agents_mode="65_agents")

    # Cr√©er 20 agents pour simulation stress
    start_agents = time.time()
    for i in range(20):
        sector = ["AGRICULTURE", "INDUSTRY", "SERVICES", "FINANCE", "ENERGY"][i % 5]
        simulation.create_agent(f"AGENT_{i:02d}", sector, Decimal('1000'))
    agents_time = time.time() - start_agents

    # Cr√©er 10 transactions
    start_tx = time.time()
    tx_ids = []
    for i in range(10):
        source = f"AGENT_{i:02d}"
        target = f"AGENT_{(i+5)%20:02d}"
        tx_id = simulation.create_transaction(source, target, Decimal('100'))
        tx_ids.append(tx_id)
    tx_time = time.time() - start_tx

    # Validation avec mesure performance
    start_validation = time.time()
    feasible_count = 0
    for tx_id in tx_ids:
        result = simulation.validate_transaction(tx_id, SimulationMode.FEASIBILITY)
        if result.success:
            feasible_count += 1
    validation_time = time.time() - start_validation

    # Statistiques finales
    stats = simulation.get_performance_stats()

    print(f"   ‚úÖ Cr√©ation agents: {agents_time*1000:.1f}ms (20 agents)")
    print(f"   ‚úÖ Cr√©ation transactions: {tx_time*1000:.1f}ms (10 tx)")
    print(f"   ‚úÖ Validation: {validation_time*1000:.1f}ms ({feasible_count}/10 feasible)")
    print(f"   ‚úÖ Cache hit rate: {stats['cache_performance']['hit_rate_percent']}%")
    print(f"   ‚úÖ Character-Set capacity: {stats['character_set_manager']['total_allocations']} chars")

    return True


def main():
    """Lance tous les tests performance"""
    print("üöÄ TESTS OPTIMISATIONS PERFORMANCE - 65 AGENTS")
    print("=" * 60)

    tests = [
        test_performance_cache_basic,
        test_transaction_validation_caching,
        test_performance_stats_comprehensive,
        test_web_load_optimization,
        test_cache_cleanup_lru,
        test_65_agents_stress_performance
    ]

    passed = 0
    failed = 0

    for test in tests:
        try:
            result = test()
            if result:
                passed += 1
                print("‚úÖ PASS\n")
            else:
                failed += 1
                print("‚ùå FAIL\n")
        except Exception as e:
            failed += 1
            print(f"‚ùå FAIL - Exception: {e}\n")

    print("=" * 60)
    print(f"üìä R√âSULTATS: {passed} PASS, {failed} FAIL")

    if failed == 0:
        print("üéâ SUCC√àS TOTAL - Optimisations performance valid√©es")
        print("‚úÖ Cache LRU avec TTL fonctionnel")
        print("‚úÖ Validation transactions cach√©e")
        print("‚úÖ Optimisations web 65 agents op√©rationnelles")
    else:
        print("‚ö†Ô∏è  Certains tests √©chouent - Investigation requise")

    return failed == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
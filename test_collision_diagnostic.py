#!/usr/bin/env python3
"""
Test diagnostique simple pour reproduction collision caract√®res taxonomiques
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

from icgs_web_native import WebNativeICGS
from decimal import Decimal


def test_character_collision():
    """Test simple pour reproduire la collision de caract√®res"""

    print("=== TEST DIAGNOSTIC COLLISION TAXONOMIQUE ===")

    # Initialiser WebNativeICGS
    print("\n1. Initialisation WebNativeICGS...")
    try:
        manager = WebNativeICGS()
        print("‚úÖ WebNativeICGS initialis√©")

        # V√©rifier pool virtuel
        capacities = manager.get_pool_capacities()
        print(f"‚úÖ Capacit√©s pool: {capacities}")

    except Exception as e:
        print(f"‚ùå √âchec initialisation: {e}")
        import traceback
        traceback.print_exc()
        return False

    # Test cr√©ation agents
    print("\n2. Test cr√©ation agents...")
    try:
        # Cr√©er 3 agents sur secteurs diff√©rents
        manager.add_agent("ALICE_FARM", "AGRICULTURE", Decimal('1000'))
        print("‚úÖ Agent ALICE_FARM cr√©√© (AGRICULTURE)")

        manager.add_agent("BOB_INDUSTRY", "INDUSTRY", Decimal('1000'))
        print("‚úÖ Agent BOB_INDUSTRY cr√©√© (INDUSTRY)")

        manager.add_agent("CAROL_SERVICES", "SERVICES", Decimal('1000'))
        print("‚úÖ Agent CAROL_SERVICES cr√©√© (SERVICES)")

        # Afficher mappings
        print(f"Real‚ÜíVirtual mappings: {manager.real_to_virtual}")

    except Exception as e:
        print(f"‚ùå √âchec cr√©ation agents: {e}")
        import traceback
        traceback.print_exc()
        return False

    # Test transaction (l√† o√π doit se produire la collision)
    print("\n3. Test transaction (point collision attendu)...")
    try:
        result = manager.process_transaction("ALICE_FARM", "BOB_INDUSTRY", Decimal('100'))
        print(f"R√©sultat transaction: {result}")

        if result['success']:
            print("‚úÖ UNEXPECTED: Transaction r√©ussie - collision non reproduite")
            return True
        else:
            print(f"‚ùå EXPECTED: Transaction √©choue - {result.get('error', 'pas d-erreur')}")

            error_msg = result.get('error', '')
            if 'collision' in error_msg.lower() or 'character' in error_msg.lower():
                print("üéØ COLLISION DE CARACT√àRES CONFIRM√âE")
                return True
            else:
                print("‚ùì √âchec pour autre raison (pas collision)")
                return False

    except Exception as e:
        print(f"‚ùå Exception lors transaction: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    success = test_character_collision()
    if success:
        print("\n‚úÖ Test diagnostique termin√© - probl√®me identifi√©")
    else:
        print("\n‚ùå Test diagnostique √©chou√©")

    sys.exit(0 if success else 1)
#!/usr/bin/env python3
"""
DIAGNOSTIC: V√©rifier patterns ajout√©s au NFA temporaire
Analyser pourquoi .*Œß.* ne fonctionne pas vs .*Œ©.*
"""

import unittest
from decimal import Decimal
import sys
import os

# Path setup pour import modules
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from icgs_core.dag import DAG, Transaction, TransactionMeasure


class TestDiagnosticNFAPatterns(unittest.TestCase):
    """Diagnostic patterns NFA construction"""

    def test_nfa_patterns_construction(self):
        """Test patterns ajout√©s au NFA temporaire"""
        print("\n=== DIAGNOSTIC NFA PATTERNS ===")

        # Setup simple
        dag = DAG()
        node_mappings = {
            "account_source_0_source": "Œ©",
            "account_source_0_sink": "Œ®",
            "account_target_0_source": "Œß",
            "account_target_0_sink": "Œ¶"
        }
        dag.account_taxonomy.update_taxonomy(node_mappings, 0)

        # Transaction avec patterns source ET target
        transaction = Transaction(
            transaction_id="patterns_test",
            source_account_id="account_source_0",
            target_account_id="account_target_0",
            amount=Decimal('100'),
            source_measures=[
                TransactionMeasure(
                    measure_id="source_omega",
                    account_id="account_source_0",
                    primary_regex_pattern=".*Œ©.*",
                    primary_regex_weight=Decimal('1.0'),
                    acceptable_value=Decimal('500')
                )
            ],
            target_measures=[
                TransactionMeasure(
                    measure_id="target_chi",
                    account_id="account_target_0",
                    primary_regex_pattern=".*Œß.*",
                    primary_regex_weight=Decimal('1.0'),
                    acceptable_value=Decimal('0'),
                    required_value=Decimal('50')
                )
            ]
        )

        print(f"Source measures: {[m.primary_regex_pattern for m in transaction.source_measures]}")
        print(f"Target measures: {[m.primary_regex_pattern for m in transaction.target_measures]}")

        # STEP 1: Cr√©er NFA temporaire et analyser contenu
        print("\n--- CR√âATION NFA TEMPORAIRE ---")
        temp_nfa = dag._create_temporary_nfa_for_transaction(transaction)

        print(f"NFA cr√©√©: {len(temp_nfa.get_final_states())} √©tats finaux")

        # Test syst√©matique tous patterns attendus
        test_cases = [
            ("Œ©", "source pattern .*Œ©.*", True),
            ("Œß", "target pattern .*Œß.*", True),
            ("Œ©Œß", "contains Œ© (source)", True),
            ("ŒßŒ©", "contains Œ© (source)", True),
            ("Œ¶Œß", "contains Œß (target)", True),
            ("ŒßŒ¶", "contains Œß (target)", True),
            ("Œ®Œ¶", "no Œ© or Œß", False),
            ("ŒëŒí", "unrelated chars", False)
        ]

        print("\n--- TEST PATTERNS SYST√âMATIQUE ---")
        for word, description, expected_match in test_cases:
            try:
                result = temp_nfa.evaluate_to_final_state(word)
                match_found = result is not None
                status = "‚úÖ" if match_found == expected_match else "‚ùå"
                print(f"{status} '{word}' ‚Üí {result} ({description}) [expected: {'match' if expected_match else 'no match'}]")

                if match_found != expected_match:
                    print(f"   üí° MISMATCH D√âTECT√â: '{word}' devrait {'matcher' if expected_match else 'ne pas matcher'}")

            except Exception as e:
                print(f"‚ùå '{word}' ‚Üí ERROR: {e}")

        # STEP 2: Test patterns isol√©s (un par un)
        print("\n--- TEST PATTERNS ISOL√âS ---")

        # Test pattern source seul
        print("Test pattern source seul (.*Œ©.*):")
        dag_source_only = DAG()
        dag_source_only.account_taxonomy.update_taxonomy(node_mappings, 0)

        transaction_source_only = Transaction(
            transaction_id="source_only",
            source_account_id="account_source_0",
            target_account_id="account_target_0",
            amount=Decimal('100'),
            source_measures=[transaction.source_measures[0]],
            target_measures=[]  # Pas de target
        )

        temp_nfa_source = dag_source_only._create_temporary_nfa_for_transaction(transaction_source_only)
        test_words = ["Œ©", "Œß", "Œ©Œß", "Œ¶Œß"]
        for word in test_words:
            result = temp_nfa_source.evaluate_to_final_state(word)
            print(f"  Source-only: '{word}' ‚Üí {result}")

        # Test pattern target seul
        print("\nTest pattern target seul (.*Œß.*):")
        dag_target_only = DAG()
        dag_target_only.account_taxonomy.update_taxonomy(node_mappings, 0)

        transaction_target_only = Transaction(
            transaction_id="target_only",
            source_account_id="account_source_0",
            target_account_id="account_target_0",
            amount=Decimal('100'),
            source_measures=[],  # Pas de source
            target_measures=[transaction.target_measures[0]]
        )

        temp_nfa_target = dag_target_only._create_temporary_nfa_for_transaction(transaction_target_only)
        for word in test_words:
            result = temp_nfa_target.evaluate_to_final_state(word)
            print(f"  Target-only: '{word}' ‚Üí {result}")

        print("\n--- DIAGNOSTIC FINAL ---")
        print("üéØ V√©rifier si patterns target ajout√©s correctement au NFA combin√©")

        self.assertTrue(True, "Diagnostic patterns termin√©")


if __name__ == '__main__':
    unittest.main(verbosity=2)